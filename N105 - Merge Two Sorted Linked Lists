// LeetCode Problem

// Method 1 - This method uses array to store lists and then sort them and later convert that array to linkedlist.
import java.util.Arrays;
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null){
            return list2;
        } else if(list2 == null){
            return list1;
        }
        ListNode temp1 = list1, temp2 = list2;
        int length = 0;
        while(temp1 != null){
            length = length + 1;
            temp1 = temp1.next;
        }
        while(temp2 != null){
            length = length + 1;
            temp2 = temp2.next;
        }
        // while(temp1 != null && temp2 != null){
        //     if(temp1 != null){
        //         length = length + 1;
        //         temp1 = temp1.next;
        //     }
        //     if(temp2 != null){
        //         length = length + 1;
        //         temp2 = temp2.next;
        //     }
        // }
        int arr[] = new int[length];
        temp1 = list1;
        temp2 = list2;
        int i=0;
        while(temp1 != null){
            arr[i] = temp1.val;
            temp1 = temp1.next;
            i++;
        }
        while(temp2 != null){
            arr[i] = temp2.val;
            temp2 = temp2.next;
            i++;
        }
        Arrays.sort(arr);
        ListNode head = null, current = null;
        for(int element : arr){
            if(head == null){
                head = new ListNode(element);
                current = head;
            } else{
                current.next = new ListNode(element);
                current = current.next;
            }
        }
        return head;
    }
}
